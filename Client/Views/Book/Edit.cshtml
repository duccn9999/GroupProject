@{
    ViewData["Title"] = "Edit Book";
}

<head>
    <link rel="stylesheet" href="~/css/book.css" />
    <link rel="stylesheet" href="~/css/create.css" />
</head>
<body>
    <div class="create-book-container">
        <h1>Edit Book</h1>

        <form id="edit-book-form" method="post" onsubmit="return submitForm(event)">
            <input type="hidden" id="bookId" name="bookId" />

            <div class="form-group">
                <label for="title">Product Name</label>
                <input type="text" id="title" name="title" required />
            </div>

            <div class="form-group">
                <label for="description">Description</label>
                <textarea id="description" name="description" required></textarea>
            </div>

            <div class="form-group">
                <label for="price">Price</label>
                <input type="number" id="price" name="price" step="0.01" required />
            </div>

            <div class="form-group">
                <label for="stock">Stock</label>
                <input type="number" id="stock" name="stock" required />
            </div>

            <div class="form-group">
                <label for="image">Product Images</label>
                <input type="text" id="image" name="image" required />
            </div>

            <div class="form-group">
                <label for="categoryId">Category</label>
                <select id="categoryId" name="categoryId" required>
                    <option value="">Select a category</option>
                    <!-- Categories will be populated here -->
                </select>
            </div>

            <button type="submit" class="submit-button">Update Product</button>
            <a href="@Url.Action("Index", "Book")" class="cancel-button">Cancel</a>
        </form>
    </div>

    <script>
        async function fetchCategories() {

            var token = localStorage.getItem('token');

            const response = await $.ajax({
                url: 'https://localhost:7079/odata/Categories',
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });


            const data = await response;
            const categorySelect = document.getElementById('categoryId');

            data.value.forEach(category => {
                const option = document.createElement('option');
                option.value = category.CategoryId; // Assuming CategoryId is a Guid
                option.textContent = category.CategoryName;
                categorySelect.appendChild(option);
            });
        }

        async function fetchBook(bookId) {
            const response = await fetch(`https://localhost:7079/odata/Books/${bookId}`, {
                method: "GET",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                }
            });
            const book = await response.json();
            document.getElementById('bookId').value = book.bookId;
            document.getElementById('title').value = book.title;
            document.getElementById('description').value = book.description;
            document.getElementById('price').value = book.price;
            document.getElementById('stock').value = book.stock;
            document.getElementById('image').value = book.image;
            const categorySelect = document.getElementById('categoryId');
            const options = Array.from(categorySelect.options);
            const matchingOption = options.find(option => option.textContent === book.categoryName);
            if (matchingOption) {
                categorySelect.value = matchingOption.value; // Pre-select the category
            }
            console.log(book); // Log the book details for debugging
        }

        async function submitForm(event) {
            event.preventDefault(); // Prevent the default form submission

            const formData = new FormData(event.target);
            const data = {
                BookId: formData.get('bookId'),
                title: formData.get('title'),
                description: formData.get('description'),
                price: parseFloat(formData.get('price')),
                image: formData.get('image'),
                stock: parseInt(formData.get('stock')),
                categoryId: formData.get('categoryId')
            };

            const response = await fetch(`https://localhost:7079/odata/Books`, {
                method: 'PUT',
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(data)
            });

            if (response.ok) {
                alert('Book updated successfully!');
                window.location.href = '@Url.Action("Index", "Book")'; // Redirect to the books list
            } else {
                alert('Error updating book. Please try again.');
            }
        }

        document.addEventListener('DOMContentLoaded', async () => {
            const urlParams = new URLSearchParams(window.location.search);
            const bookId = urlParams.get('id'); // Assuming you're passing the book ID as a query parameter
            console.log(bookId); // Log the book ID for debugging
            await fetchCategories(); // Fetch categories on page load
            await fetchBook(bookId); // Fetch book details on page load
        });
    </script>
</body>