@{
    ViewData["Title"] = "Edit User";
}

<head>
    <link rel="stylesheet" href="~/css/book.css" />
    <link rel="stylesheet" href="~/css/create.css" />
</head>
<body>
    <div class="create-book-container">
        <h1>Edit User</h1>

        <form id="edit-book-form" method="post" onsubmit="return submitForm(event)">
            <input type="hidden" id="bookId" name="bookId" />
            <div id="rolesContainer">
            </div>
            <button type="submit" class="submit-button">Assign roles for user</button>
            <a href="@Url.Action("Index", "User")" class="cancel-button">Cancel</a>
        </form>
    </div>

    <script>
        async function fetchRoles() {

            var token = localStorage.getItem('token');

            const response = await $.ajax({
                url: 'https://localhost:7079/odata/Roles?$Select=RoleId,RoleName',
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            const rolesContainer = document.getElementById("rolesContainer");
            const roles = await response;
            roles.value.forEach(role => {
                const formGroup = document.createElement("div");
                formGroup.classList.add("form-check"); // Bootstrap class for checkboxes

                const checkbox = document.createElement("input");
                checkbox.type = "checkbox";
                checkbox.id = `role-${role.RoleId}`;
                checkbox.name = "roles";
                checkbox.value = role.RoleId;
                checkbox.classList.add("form-check-input"); // Bootstrap class

                const label = document.createElement("label");
                label.setAttribute("for", `role-${role.RoleId}`);
                label.textContent = role.RoleName;
                label.classList.add("form-check-label"); // Bootstrap class

                formGroup.appendChild(checkbox);
                formGroup.appendChild(label);
                document.getElementById("rolesContainer").appendChild(formGroup);
            });
        }

        async function submitForm(event) {
            event.preventDefault(); // Prevent the default form submission

            const formData = new FormData(event.target);
            const data = {
                BookId: formData.get('bookId'),
                title: formData.get('title'),
                description: formData.get('description'),
                price: parseFloat(formData.get('price')),
                image: formData.get('image'),
                stock: parseInt(formData.get('stock')),
                categoryId: formData.get('categoryId')
            };

            const response = await fetch(`https://localhost:7079/odata/UserRoles`, {
                method: 'PUT',
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(data)
            });

            if (response.ok) {
                alert('User updated successfully!');
                window.location.href = '@Url.Action("Index", "User")'; // Redirect to the books list
            } else {
                alert('Error updating book. Please try again.');
            }
        }

        document.addEventListener('DOMContentLoaded', async () => {
            const urlParams = new URLSearchParams(window.location.search);
            const bookId = urlParams.get('id'); // Assuming you're passing the book ID as a query parameter
            console.log(bookId); // Log the book ID for debugging
            await fetchRoles(); // Fetch categories on page load
        });
    </script>
</body>